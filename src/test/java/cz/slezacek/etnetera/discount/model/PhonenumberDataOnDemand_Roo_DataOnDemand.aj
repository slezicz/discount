// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cz.slezacek.etnetera.discount.model;

import cz.slezacek.etnetera.discount.model.Phonenumber;
import cz.slezacek.etnetera.discount.model.PhonenumberDataOnDemand;
import cz.slezacek.etnetera.discount.service.PhonenumberService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PhonenumberDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PhonenumberDataOnDemand: @Component;
    
    private Random PhonenumberDataOnDemand.rnd = new SecureRandom();
    
    private List<Phonenumber> PhonenumberDataOnDemand.data;
    
    @Autowired
    PhonenumberService PhonenumberDataOnDemand.phonenumberService;
    
    public Phonenumber PhonenumberDataOnDemand.getNewTransientPhonenumber(int index) {
        Phonenumber obj = new Phonenumber();
        setPhonenumber(obj, index);
        return obj;
    }
    
    public void PhonenumberDataOnDemand.setPhonenumber(Phonenumber obj, int index) {
        String phonenumber = "phonenumber_" + index;
        obj.setPhonenumber(phonenumber);
    }
    
    public Phonenumber PhonenumberDataOnDemand.getSpecificPhonenumber(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Phonenumber obj = data.get(index);
        Long id = obj.getId();
        return phonenumberService.findPhonenumber(id);
    }
    
    public Phonenumber PhonenumberDataOnDemand.getRandomPhonenumber() {
        init();
        Phonenumber obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return phonenumberService.findPhonenumber(id);
    }
    
    public boolean PhonenumberDataOnDemand.modifyPhonenumber(Phonenumber obj) {
        return false;
    }
    
    public void PhonenumberDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = phonenumberService.findPhonenumberEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Phonenumber' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Phonenumber>();
        for (int i = 0; i < 10; i++) {
            Phonenumber obj = getNewTransientPhonenumber(i);
            try {
                phonenumberService.savePhonenumber(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
