// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cz.slezacek.etnetera.discount.model;

import cz.slezacek.etnetera.discount.model.Code;
import cz.slezacek.etnetera.discount.model.CodeDataOnDemand;
import cz.slezacek.etnetera.discount.model.EventDataOnDemand;
import cz.slezacek.etnetera.discount.model.PhonenumberDataOnDemand;
import cz.slezacek.etnetera.discount.service.CodeService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CodeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CodeDataOnDemand: @Component;
    
    private Random CodeDataOnDemand.rnd = new SecureRandom();
    
    private List<Code> CodeDataOnDemand.data;
    
    @Autowired
    EventDataOnDemand CodeDataOnDemand.eventDataOnDemand;
    
    @Autowired
    PhonenumberDataOnDemand CodeDataOnDemand.phonenumberDataOnDemand;
    
    @Autowired
    CodeService CodeDataOnDemand.codeService;
    
    public Code CodeDataOnDemand.getNewTransientCode(int index) {
        Code obj = new Code();
        setCodeLength(obj, index);
        setCodeValue(obj, index);
        setUsed(obj, index);
        setValidUntil(obj, index);
        return obj;
    }
    
    public void CodeDataOnDemand.setCodeLength(Code obj, int index) {
        int codeLength = index;
        obj.setCodeLength(codeLength);
    }
    
    public void CodeDataOnDemand.setCodeValue(Code obj, int index) {
        String codeValue = "codeValue_" + index;
        obj.setCodeValue(codeValue);
    }
    
    public void CodeDataOnDemand.setUsed(Code obj, int index) {
        Boolean used = Boolean.TRUE;
        obj.setUsed(used);
    }
    
    public void CodeDataOnDemand.setValidUntil(Code obj, int index) {
        Date validUntil = new Date(new Date().getTime() + 10000000L);
        obj.setValidUntil(validUntil);
    }
    
    public Code CodeDataOnDemand.getSpecificCode(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Code obj = data.get(index);
        Long id = obj.getId();
        return codeService.findCode(id);
    }
    
    public Code CodeDataOnDemand.getRandomCode() {
        init();
        Code obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return codeService.findCode(id);
    }
    
    public boolean CodeDataOnDemand.modifyCode(Code obj) {
        return false;
    }
    
    public void CodeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = codeService.findCodeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Code' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Code>();
        for (int i = 0; i < 10; i++) {
            Code obj = getNewTransientCode(i);
            try {
                codeService.saveCode(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
